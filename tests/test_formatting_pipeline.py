"""Comprehensive tests for the formatting pipeline."""

import pytest
from core.formatting.telegram_formatter import TelegramFormatter


class TestFormattingPipeline:
    """Test the complete formatting pipeline."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.formatter = TelegramFormatter()
    
    def test_math_content_pipeline(self):
        """Test complete math content formatting pipeline."""
        formatter = TelegramFormatter()
        input_text = """**–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞**

–§–æ—Ä–º—É–ª–∞: \\( a^2 + b^2 = c^2 \\), –≥–¥–µ a –∏ b ‚Äî —ç—Ç–æ –¥–ª–∏–Ω—ã –∫–∞—Ç–µ—Ç–æ–≤, –∞ c ‚Äî –¥–ª–∏–Ω–∞ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã.

–ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –æ–¥–∏–Ω –∫–∞—Ç–µ—Ç —Ä–∞–≤–µ–Ω 3, –∞ –¥—Ä—É–≥–æ–π 4, —Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–∞–∫:
- \\( 3^2 = 9 \\)
- \\( 4^2 = 16 \\)
- –¢–µ–ø–µ—Ä—å —Å–ª–æ–∂–∏–º: \\( 9 + 16 = 25 \\)
- –ò –Ω–∞–π–¥–µ–º –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É: \\( c = sqrt(25) = 5 \\)

–û—Ç–≤–µ—Ç: –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞ —Ä–∞–≤–Ω–∞ 5"""
        
        result = formatter.format_message(input_text, "math")
        
        # Check mathematical formatting
        assert "<code>a¬≤ + b¬≤ = c¬≤</code>" in result
        assert "<code>3¬≤ = 9</code>" in result
        assert "<code>4¬≤ = 16</code>" in result
        assert "<code>9 + 16 = 25</code>" in result
        assert "<code>c = ‚àö25 = 5</code>" in result
        
        # Check educational formatting
        assert "<b>üßÆ –§–æ—Ä–º—É–ª–∞:</b>" in result
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert "<b>‚úÖ –û—Ç–≤–µ—Ç:</b>" in result
        
        # Check markdown formatting
        assert "<b>–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞</b>" in result
    
    def test_science_content_pipeline(self):
        """Test complete science content formatting pipeline."""
        formatter = TelegramFormatter()
        input_text = """**–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑**

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.

–ù–∞–ø—Ä–∏–º–µ—Ä: –ª–∏—Å—Ç—å—è —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–≥–ª–æ—â–∞—é—Ç —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç –∏ —É–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑.

–†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–∞—Å—Ç–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –∫–∏—Å–ª–æ—Ä–æ–¥ –∏ –≥–ª—é–∫–æ–∑—É."""
        
        result = formatter.format_message(input_text, "science")
        
        # Check educational formatting
        assert "<b>üìñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>" in result
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert "<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>" in result
        
        # Check markdown formatting
        assert "<b>–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑</b>" in result
    
    def test_language_content_pipeline(self):
        """Test complete language content formatting pipeline."""
        formatter = TelegramFormatter()
        input_text = """**–ü—Ä–∞–≤–∏–ª–æ –ñ–ò-–®–ò**

–ü—Ä–∞–≤–∏–ª–æ: –ø–æ—Å–ª–µ –ñ –∏ –® –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—Ç—Å—è –ò, –∞ –Ω–µ –´.

–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏—Ç—å, —à–∏—Ç—å, –º–∞—à–∏–Ω–∞, –∂–∏–∑–Ω—å.

–û—Ç–≤–µ—Ç: —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å!"""
        
        result = formatter.format_message(input_text, "language")
        
        # Check educational formatting
        assert "<b>üìè –ü—Ä–∞–≤–∏–ª–æ:</b>" in result
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert "<b>‚úÖ –û—Ç–≤–µ—Ç:</b>" in result
        
        # Check markdown formatting
        assert "<b>–ü—Ä–∞–≤–∏–ª–æ –ñ–ò-–®–ò</b>" in result
    
    def test_mixed_content_pipeline(self):
        """Test mixed content with various formatting elements."""
        formatter = TelegramFormatter()
        input_text = """**–°–º–µ—à–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞**

–§–æ—Ä–º—É–ª–∞: \\( S = \\pi \\times r^2 \\)

–ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Ä–∞–¥–∏—É—Å —Ä–∞–≤–µ–Ω 5, —Ç–æ –ø–ª–æ—â–∞–¥—å —Ä–∞–≤–Ω–∞ \\( \\pi \\times 5^2 = 25\\pi \\)

–†–µ—à–µ–Ω–∏–µ:
1. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞
2. –í–æ–∑–≤–æ–¥–∏–º –≤ –∫–≤–∞–¥—Ä–∞—Ç
3. –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ œÄ

–û—Ç–≤–µ—Ç: –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–≤–Ω–∞ 25œÄ"""
        
        result = formatter.format_message(input_text, "math")
        
        # Check mathematical formatting
        assert "<code>S = œÄ √ó r¬≤</code>" in result
        assert "<code>œÄ √ó 5¬≤ = 25œÄ</code>" in result
        
        # Check educational formatting
        assert "<b>üßÆ –§–æ—Ä–º—É–ª–∞:</b>" in result
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert "<b>üîç –†–µ—à–µ–Ω–∏–µ:</b>" in result
        assert "<b>‚úÖ –û—Ç–≤–µ—Ç:</b>" in result
        
        # Check list formatting
        assert "‚Ä¢ <b>1.</b> –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞" in result
        assert "‚Ä¢ <b>2.</b> –í–æ–∑–≤–æ–¥–∏–º –≤ –∫–≤–∞–¥—Ä–∞—Ç" in result
        assert "‚Ä¢ <b>3.</b> –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ œÄ" in result
    
    def test_edge_cases(self):
        """Test edge cases and error handling."""
        formatter = TelegramFormatter()
        
        # Test empty input
        result = formatter.format_message("", "general")
        assert result == ""
        
        # Test input without special formatting
        result = formatter.format_message("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "general")
        assert result == "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"
        
        # Test malformed LaTeX
        result = formatter.format_message("–§–æ—Ä–º—É–ª–∞: \\( a^2 + b^2", "math")
        assert "–§–æ—Ä–º—É–ª–∞:" in result  # Should not crash
        
        # Test very long input
        long_text = "–ù–∞–ø—Ä–∏–º–µ—Ä: " + "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç " * 100
        result = formatter.format_message(long_text, "general")
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert len(result) > 0
    
    def test_performance(self):
        """Test formatting performance with various content types."""
        formatter = TelegramFormatter()
        
        test_cases = [
            ("math", "–§–æ—Ä–º—É–ª–∞: \\( x^2 + y^2 = z^2 \\)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ x=3, y=4, —Ç–æ z=5\n\n–û—Ç–≤–µ—Ç: z = 5"),
            ("science", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ø—Ä–æ—Ü–µ—Å—Å\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–º–µ—Ä\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–µ–∑—É–ª—å—Ç–∞—Ç"),
            ("language", "–ü—Ä–∞–≤–∏–ª–æ: –ø—Ä–∞–≤–∏–ª–æ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–º–µ—Ä\n\n–û—Ç–≤–µ—Ç: –æ—Ç–≤–µ—Ç"),
            ("general", "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        ]
        
        for content_type, text in test_cases:
            result = formatter.format_message(text, content_type)
            assert isinstance(result, str)
            assert len(result) > 0
            # Should not take too long (basic performance check)
            assert len(result) <= len(text) * 3  # Reasonable upper bound










