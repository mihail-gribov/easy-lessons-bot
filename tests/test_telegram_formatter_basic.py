"""Basic tests for TelegramFormatter."""

import pytest
from core.formatting.telegram_formatter import TelegramFormatter


class TestTelegramFormatterBasic:
    """Test basic functionality of TelegramFormatter."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.formatter = TelegramFormatter()
    
    def test_basic_formatting(self):
        """Test basic text formatting."""
        formatter = TelegramFormatter()
        input_text = "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"
        result = formatter.format_message(input_text, "general")
        assert result == input_text
    
    def test_markdown_bold_conversion(self):
        """Test bold markdown conversion."""
        formatter = TelegramFormatter()
        input_text = "**–í–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç**"
        result = formatter.format_message(input_text, "general")
        assert "<b>–í–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç</b>" in result
    
    def test_markdown_italic_conversion(self):
        """Test italic markdown conversion."""
        formatter = TelegramFormatter()
        input_text = "*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*"
        result = formatter.format_message(input_text, "general")
        assert "<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>" in result
    
    def test_markdown_code_conversion(self):
        """Test code markdown conversion."""
        formatter = TelegramFormatter()
        input_text = "`–∫–æ–¥`"
        result = formatter.format_message(input_text, "general")
        assert "<code>–∫–æ–¥</code>" in result
    
    def test_graceful_degradation(self):
        """Test handling of malformed input."""
        formatter = TelegramFormatter()
        input_text = "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        result = formatter.format_message(input_text, "general")
        # Should not raise exceptions and return some reasonable output
        assert isinstance(result, str)
        assert len(result) > 0
    
    def test_empty_input(self):
        """Test handling of empty input."""
        formatter = TelegramFormatter()
        result = formatter.format_message("", "general")
        assert result == ""
    
    def test_latex_conversion(self):
        """Test LaTeX expression conversion."""
        formatter = TelegramFormatter()
        input_text = r"–§–æ—Ä–º—É–ª–∞: \( a^2 + b^2 = c^2 \)"
        result = formatter.format_message(input_text, "math")
        assert "<code>a¬≤ + b¬≤ = c¬≤</code>" in result
    
    def test_power_conversion(self):
        """Test power notation conversion."""
        formatter = TelegramFormatter()
        input_text = "x^2 + y^3 = z^10"
        result = formatter.format_message(input_text, "math")
        assert "x¬≤ + y¬≥ = z¬π‚Å∞" in result
    
    def test_combined_formatting(self):
        """Test combined markdown and math formatting."""
        formatter = TelegramFormatter()
        input_text = r"**–§–æ—Ä–º—É–ª–∞:** \( x^2 + y^2 = z^2 \)"
        result = formatter.format_message(input_text, "math")
        assert "<b>–§–æ—Ä–º—É–ª–∞:</b>" in result
        assert "<code>x¬≤ + y¬≤ = z¬≤</code>" in result
    
    def test_educational_formatting(self):
        """Test educational pattern formatting."""
        formatter = TelegramFormatter()
        input_text = "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏. –û—Ç–≤–µ—Ç: 42"
        result = formatter.format_message(input_text, "math")
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert "<b>‚úÖ –û—Ç–≤–µ—Ç:</b>" in result
    
    def test_comprehensive_formatting(self):
        """Test comprehensive formatting with all features."""
        formatter = TelegramFormatter()
        input_text = "**–§–æ—Ä–º—É–ª–∞:** \\( x^2 + y^2 = z^2 \\)\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ x=3, y=4, —Ç–æ z=5\n\n–û—Ç–≤–µ—Ç: z = 5"
        result = formatter.format_message(input_text, "math")
        assert "<b>–§–æ—Ä–º—É–ª–∞:</b>" in result
        assert "<code>x¬≤ + y¬≤ = z¬≤</code>" in result
        assert "<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>" in result
        assert "<b>‚úÖ –û—Ç–≤–µ—Ç:</b>" in result
