"""Educational content formatting templates."""

import re
from typing import Dict


class EducationalTemplates:
    """Apply educational formatting patterns."""
    
    SUBJECT_EMOJIS = {
        'math': 'üìê',
        'science': 'üî¨', 
        'physics': '‚ö°',
        'chemistry': '‚öóÔ∏è',
        'biology': 'üß¨',
        'language': 'üìö',
        'history': 'üìú',
        'geography': 'üåç',
        'general': 'üí°'
    }
    
    def apply_formatting(self, text: str, content_type: str) -> str:
        """Apply educational formatting patterns."""
        # Add subject emoji
        emoji = self.SUBJECT_EMOJIS.get(content_type, 'üí°')
        
        # Format common educational patterns
        text = self._format_examples(text)
        text = self._format_steps(text)
        text = self._format_results(text)
        text = self._format_definitions(text)
        
        return text
    
    def _format_examples(self, text: str) -> str:
        """Format example sections."""
        # Handle "–ù–∞–ø—Ä–∏–º–µ—Ä:" and "–ù–∞–ø—Ä–∏–º–µ—Ä," - use more specific patterns
        text = re.sub(r'^–ù–∞–ø—Ä–∏–º–µ—Ä:', r'<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–ù–∞–ø—Ä–∏–º–µ—Ä,', r'<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä,</b>', text, flags=re.IGNORECASE)
        
        # Handle "–ù–∞–ø—Ä–∏–º–µ—Ä:" in the middle of text (after newlines)
        text = re.sub(r'\n–ù–∞–ø—Ä–∏–º–µ—Ä:', r'\n<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–ù–∞–ø—Ä–∏–º–µ—Ä,', r'\n<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä,</b>', text, flags=re.IGNORECASE)
        
        # Handle "–ù–∞–ø—Ä–∏–º–µ—Ä:" after double newlines
        text = re.sub(r'\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:', r'\n\n<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n\n–ù–∞–ø—Ä–∏–º–µ—Ä,', r'\n\n<b>üìù –ù–∞–ø—Ä–∏–º–µ—Ä,</b>', text, flags=re.IGNORECASE)
        
        # Handle "–ü—Ä–∏–º–µ—Ä:" only if it's not part of "–ù–∞–ø—Ä–∏–º–µ—Ä:"
        # Use negative lookbehind to avoid matching "–ü—Ä–∏–º–µ—Ä:" inside "–ù–∞–ø—Ä–∏–º–µ—Ä:"
        text = re.sub(r'(?<!–ù–∞)–ü—Ä–∏–º–µ—Ä:', r'<b>üìù –ü—Ä–∏–º–µ—Ä:</b>', text, flags=re.IGNORECASE)
        
        return text
    
    def _format_steps(self, text: str) -> str:
        """Format step-by-step solutions."""
        # Handle at start of line
        text = re.sub(r'^–†–µ—à–µ–Ω–∏–µ:', r'<b>üîç –†–µ—à–µ–Ω–∏–µ:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–®–∞–≥–∏:', r'<b>üìã –®–∞–≥–∏:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–ê–ª–≥–æ—Ä–∏—Ç–º:', r'<b>‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º:</b>', text, flags=re.IGNORECASE)
        
        # Handle after newlines
        text = re.sub(r'\n–†–µ—à–µ–Ω–∏–µ:', r'\n<b>üîç –†–µ—à–µ–Ω–∏–µ:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–®–∞–≥–∏:', r'\n<b>üìã –®–∞–≥–∏:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–ê–ª–≥–æ—Ä–∏—Ç–º:', r'\n<b>‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º:</b>', text, flags=re.IGNORECASE)
        
        # Format numbered lists
        text = re.sub(r'^(\d+)\.', r'‚Ä¢ <b>\1.</b>', text, flags=re.MULTILINE)
        text = re.sub(r'^- ', r'‚Ä¢ ', text, flags=re.MULTILINE)
        
        return text
    
    def _format_results(self, text: str) -> str:
        """Format answers and results."""
        # Handle at start of line
        text = re.sub(r'^–û—Ç–≤–µ—Ç:', r'<b>‚úÖ –û—Ç–≤–µ—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–†–µ–∑—É–ª—å—Ç–∞—Ç:', r'<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–ò—Ç–æ–≥:', r'<b>‚úÖ –ò—Ç–æ–≥:</b>', text, flags=re.IGNORECASE)
        
        # Handle after newlines
        text = re.sub(r'\n–û—Ç–≤–µ—Ç:', r'\n<b>‚úÖ –û—Ç–≤–µ—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–†–µ–∑—É–ª—å—Ç–∞—Ç:', r'\n<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–ò—Ç–æ–≥:', r'\n<b>‚úÖ –ò—Ç–æ–≥:</b>', text, flags=re.IGNORECASE)
        
        # Handle after double newlines
        text = re.sub(r'\n\n–û—Ç–≤–µ—Ç:', r'\n\n<b>‚úÖ –û—Ç–≤–µ—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:', r'\n\n<b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n\n–ò—Ç–æ–≥:', r'\n\n<b>‚úÖ –ò—Ç–æ–≥:</b>', text, flags=re.IGNORECASE)
        
        # Handle after periods and spaces
        text = re.sub(r'\. –û—Ç–≤–µ—Ç:', r'. <b>‚úÖ –û—Ç–≤–µ—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\. –†–µ–∑—É–ª—å—Ç–∞—Ç:', r'. <b>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\. –ò—Ç–æ–≥:', r'. <b>‚úÖ –ò—Ç–æ–≥:</b>', text, flags=re.IGNORECASE)
        
        return text
    
    def _format_definitions(self, text: str) -> str:
        """Format definitions and important terms."""
        # Handle at start of line
        text = re.sub(r'^–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:', r'<b>üìñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–ü—Ä–∞–≤–∏–ª–æ:', r'<b>üìè –ü—Ä–∞–≤–∏–ª–æ:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'^–§–æ—Ä–º—É–ª–∞:', r'<b>üßÆ –§–æ—Ä–º—É–ª–∞:</b>', text, flags=re.IGNORECASE)
        
        # Handle after newlines
        text = re.sub(r'\n–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:', r'\n<b>üìñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–ü—Ä–∞–≤–∏–ª–æ:', r'\n<b>üìè –ü—Ä–∞–≤–∏–ª–æ:</b>', text, flags=re.IGNORECASE)
        text = re.sub(r'\n–§–æ—Ä–º—É–ª–∞:', r'\n<b>üßÆ –§–æ—Ä–º—É–ª–∞:</b>', text, flags=re.IGNORECASE)
        
        return text
